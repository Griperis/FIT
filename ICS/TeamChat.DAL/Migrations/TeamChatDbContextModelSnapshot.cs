// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeamChat.DAL;

namespace TeamChat.DAL.Migrations
{
    [DbContext(typeof(TeamChatDbContext))]
    partial class TeamChatDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TeamChat.DAL.Entities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AuthorId");

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Activities");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Activity");
                });

            modelBuilder.Entity("TeamChat.DAL.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("TeamChat.DAL.Entities.TeamUser", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("TeamId");

                    b.Property<Guid>("Id");

                    b.HasKey("UserId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamUsers");
                });

            modelBuilder.Entity("TeamChat.DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<DateTime>("LastLoginTime");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TeamChat.DAL.Entities.Comment", b =>
                {
                    b.HasBaseType("TeamChat.DAL.Entities.Activity");

                    b.Property<Guid?>("BelongsToId");

                    b.HasIndex("BelongsToId");

                    b.HasDiscriminator().HasValue("Comment");
                });

            modelBuilder.Entity("TeamChat.DAL.Entities.Post", b =>
                {
                    b.HasBaseType("TeamChat.DAL.Entities.Activity");

                    b.Property<Guid?>("TeamId");

                    b.Property<string>("Title");

                    b.HasIndex("TeamId");

                    b.HasDiscriminator().HasValue("Post");
                });

            modelBuilder.Entity("TeamChat.DAL.Entities.Activity", b =>
                {
                    b.HasOne("TeamChat.DAL.Entities.User", "Author")
                        .WithMany("Activities")
                        .HasForeignKey("AuthorId");
                });

            modelBuilder.Entity("TeamChat.DAL.Entities.TeamUser", b =>
                {
                    b.HasOne("TeamChat.DAL.Entities.Team", "Team")
                        .WithMany("Members")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TeamChat.DAL.Entities.User", "User")
                        .WithMany("Teams")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TeamChat.DAL.Entities.Comment", b =>
                {
                    b.HasOne("TeamChat.DAL.Entities.Post", "BelongsTo")
                        .WithMany("Comments")
                        .HasForeignKey("BelongsToId");
                });

            modelBuilder.Entity("TeamChat.DAL.Entities.Post", b =>
                {
                    b.HasOne("TeamChat.DAL.Entities.Team")
                        .WithMany("Posts")
                        .HasForeignKey("TeamId");
                });
#pragma warning restore 612, 618
        }
    }
}
